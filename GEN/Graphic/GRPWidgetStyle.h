/*------------------------------------------------------------------------------------------
// GRPWidgetStyle.HPP
*/
/**
// \class
//
// Manages widget styles
//
//  @author: Diego Martinez Ruiz de Gaona
//
//  Date of Creation : 15/11/2017 18:10:38
//  Last Modification :
*/
/* GEN  Copyright (C).  All right reserved.
/*------------------------------------------------------------------------------------------*/


#ifndef _GRPWIDGETSTYLE_HPP
#define _GRPWIDGETSTYLE_HPP
/*---- INCLUDES --------------------------------------------------------------------------*/

#include "XMap.h"
#include "XFString.h"
#include "XDictionary.h"

#define WIDGETSTRING XFSTRING

/*---- DEFINES & ENUMS  ------------------------------------------------------------------*/

class GRPWIDGET;

/*---- CLASS -----------------------------------------------------------------------------*/
    enum GRPWIDGETSTYLETYPE
    {
        GRPWIDGETSTYLETYPE_UNKNOWN,

        GRPWIDGETSTYLETYPE_DISPLAY,
        GRPWIDGETSTYLETYPE_VISIBILITY,

        GRPWIDGETSTYLETYPE_FLOAT,
        GRPWIDGETSTYLETYPE_CLEAR,

        GRPWIDGETSTYLETYPE_POSITION,

        GRPWIDGETSTYLETYPE_WIDTH,
        GRPWIDGETSTYLETYPE_HEIGHT,
        GRPWIDGETSTYLETYPE_TOP,
        GRPWIDGETSTYLETYPE_LEFT,

        GRPWIDGETSTYLETYPE_MAX_WIDTH,
        GRPWIDGETSTYLETYPE_MAX_HEIGHT,
        GRPWIDGETSTYLETYPE_MIN_WIDTH,
        GRPWIDGETSTYLETYPE_MIN_HEIGHT,

        GRPWIDGETSTYLETYPE_ALIGN_LEFT,
        GRPWIDGETSTYLETYPE_ALIGN_BOTTOM,
        GRPWIDGETSTYLETYPE_ALIGN_RIGHT,
        GRPWIDGETSTYLETYPE_ALIGN_TOP,

        //GRPWIDGETSTYLETYPE_ALIGN_CONTENT,
        //GRPWIDGETSTYLETYPE_ANIMATION,
        //GRPWIDGETSTYLETYPE_ANIMATION_DELAY,
        //GRPWIDGETSTYLETYPE_ANIMATION_DIRECTION,
        //GRPWIDGETSTYLETYPE_ANIMATION_DURATION,
        //GRPWIDGETSTYLETYPE_ANIMATION_FILL_MODE,
        //GRPWIDGETSTYLETYPE_ANIMATION_ITERATION_COUNT,
        //GRPWIDGETSTYLETYPE_ANIMATION_NAME,
        //GRPWIDGETSTYLETYPE_ANIMATION_PLAY_STATE,
        //GRPWIDGETSTYLETYPE_ANIMATION_TIMING_FUNCTION,

        //GRPWIDGETSTYLETYPE_BACKFACE_VISIBILITY,

        GRPWIDGETSTYLETYPE_BACKGROUND_COLOR,
        GRPWIDGETSTYLETYPE_BACKGROUND_IMAGE,
        GRPWIDGETSTYLETYPE_BACKGROUND_SIZE,
        GRPWIDGETSTYLETYPE_BACKGROUND_SIZE_X,
        GRPWIDGETSTYLETYPE_BACKGROUND_SIZE_Y,
        //GRPWIDGETSTYLETYPE_BACKGROUND_REPEAT,
        GRPWIDGETSTYLETYPE_BACKGROUND_POSITION,
        GRPWIDGETSTYLETYPE_BACKGROUND_POSITION_X,
        GRPWIDGETSTYLETYPE_BACKGROUND_POSITION_Y,
        //GRPWIDGETSTYLETYPE_BACKGROUND_ATTACHMENT,
        //GRPWIDGETSTYLETYPE_BACKGROUND_BLEND_MODE,
        //GRPWIDGETSTYLETYPE_BACKGROUND_CLIP,

        GRPWIDGETSTYLETYPE_BORDER,
        GRPWIDGETSTYLETYPE_BORDER_STYLE,
        GRPWIDGETSTYLETYPE_BORDER_WIDTH,
        GRPWIDGETSTYLETYPE_BORDER_COLOR,
        GRPWIDGETSTYLETYPE_BORDER_RADIUS,

        GRPWIDGETSTYLETYPE_BORDER_BOTTOM,
        GRPWIDGETSTYLETYPE_BORDER_TOP,
        GRPWIDGETSTYLETYPE_BORDER_LEFT,
        GRPWIDGETSTYLETYPE_BORDER_RIGHT,


        GRPWIDGETSTYLETYPE_BORDER_BOTTOM_STYLE,
        GRPWIDGETSTYLETYPE_BORDER_BOTTOM_WIDTH,
        GRPWIDGETSTYLETYPE_BORDER_BOTTOM_COLOR,
        GRPWIDGETSTYLETYPE_BORDER_BOTTOM_RADIUS,


        GRPWIDGETSTYLETYPE_BORDER_TOP_STYLE,
        GRPWIDGETSTYLETYPE_BORDER_TOP_WIDTH,
        GRPWIDGETSTYLETYPE_BORDER_TOP_COLOR,
        GRPWIDGETSTYLETYPE_BORDER_TOP_RADIUS,


        GRPWIDGETSTYLETYPE_BORDER_LEFT_STYLE,
        GRPWIDGETSTYLETYPE_BORDER_LEFT_WIDTH,
        GRPWIDGETSTYLETYPE_BORDER_LEFT_COLOR,
        GRPWIDGETSTYLETYPE_BORDER_LEFT_RADIUS,


        GRPWIDGETSTYLETYPE_BORDER_RIGHT_STYLE,
        GRPWIDGETSTYLETYPE_BORDER_RIGHT_WIDTH,
        GRPWIDGETSTYLETYPE_BORDER_RIGHT_COLOR,
        GRPWIDGETSTYLETYPE_BORDER_RIGHT_RADIUS,

        //GRPWIDGETSTYLETYPE_BORDER_COLLAPSE,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE_OUTSET,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE_REPEAT,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE_SLICE,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE_SOURCE,
        //GRPWIDGETSTYLETYPE_BORDER_IMAGE_WIDTH,

        //GRPWIDGETSTYLETYPE_TABLE_BORDER_COLLAPSE,
        GRPWIDGETSTYLETYPE_TABLE_BORDER_SPACING,
        GRPWIDGETSTYLETYPE_TABLE_BORDER_SPACING_X,
        GRPWIDGETSTYLETYPE_TABLE_BORDER_SPACING_Y,
        //GRPWIDGETSTYLETYPE_TABLE_CAPTION_SIDE,
        //GRPWIDGETSTYLETYPE_TABLE_CAPTION_SIDE,
        //GRPWIDGETSTYLETYPE_TABLE_EMPTY_CELLS,
        GRPWIDGETSTYLETYPE_TABLE_ROWSPAN,
        GRPWIDGETSTYLETYPE_TABLE_COLSPAN,

        //GRPWIDGETSTYLETYPE_BOX_SIZING,

        //GRPWIDGETSTYLETYPE_CARET_COLOR

        //GRPWIDGETSTYLETYPE_CLIP
        //GRPWIDGETSTYLETYPE_COLUMNS
        //GRPWIDGETSTYLETYPE_COLUMN_COUNT
        //GRPWIDGETSTYLETYPE_COLUMN_FILL
        //GRPWIDGETSTYLETYPE_COLUMN_GAP
        //GRPWIDGETSTYLETYPE_COLUMN_RULE
        //GRPWIDGETSTYLETYPE_COLUMN_RULE_COLOR
        //GRPWIDGETSTYLETYPE_COLUMN_RULE_STYLE
        //GRPWIDGETSTYLETYPE_COLUMN_RULE_WIDTH
        //GRPWIDGETSTYLETYPE_COLUMN_SPAN

        //GRPWIDGETSTYLETYPE_CURSOR,
        //GRPWIDGETSTYLETYPE_DIRECTION,
        //GRPWIDGETSTYLETYPE_FILTER,

        //GRPWIDGETSTYLETYPE_FILTER_BLUR,
        //GRPWIDGETSTYLETYPE_FILTER_BRIGHTNESS,
        //GRPWIDGETSTYLETYPE_FILTER_CONTRAST,
        //GRPWIDGETSTYLETYPE_FILTER_DROPSHADOW,
        //GRPWIDGETSTYLETYPE_FILTER_GRAYSCALE,
        //GRPWIDGETSTYLETYPE_FILTER_HUE_ROTATE,
        //GRPWIDGETSTYLETYPE_FILTER_INVERT,
        //GRPWIDGETSTYLETYPE_FILTER_OPACITY
        //GRPWIDGETSTYLETYPE_FILTER_SATURATE
        //GRPWIDGETSTYLETYPE_FILTER_SEPIA
        //GRPWIDGETSTYLETYPE_FILTER_URL

        //GRPWIDGETSTYLETYPE_FLEX
        //GRPWIDGETSTYLETYPE_FLEX_BASIS
        //GRPWIDGETSTYLETYPE_FLEX_DIRECTION
        //GRPWIDGETSTYLETYPE_FLEX_FLOW


        GRPWIDGETSTYLETYPE_FONT_COLOR,
        GRPWIDGETSTYLETYPE_FONT_SIZE,
        GRPWIDGETSTYLETYPE_FONT_FACE,
        GRPWIDGETSTYLETYPE_FONT_DECORATION,
        GRPWIDGETSTYLETYPE_FONT_INDENT,
        //GRPWIDGETSTYLETYPE_FONT_KERNING
        //GRPWIDGETSTYLETYPE_FONT_LETTER_SPACING
        //GRPWIDGETSTYLETYPE_FONT_DIRECTION,
        GRPWIDGETSTYLETYPE_FONT_LINE_HEIGHT,
        GRPWIDGETSTYLETYPE_FONT_STYLE,
        GRPWIDGETSTYLETYPE_FONT_WEIGHT,
        //GRPWIDGETSTYLETYPE_FONT_STRETCH,
        //GRPWIDGETSTYLETYPE_FONT_VARIANT,

        //GRPWIDGETSTYLETYPE_GRID,
        //GRPWIDGETSTYLETYPE_GRID_AREA,
        //GRPWIDGETSTYLETYPE_GRID_AUTO_COLUMNS,
        //GRPWIDGETSTYLETYPE_GRID_AUTO_FLOW,
        //GRPWIDGETSTYLETYPE_GRID_AUTO_ROWS,
        //GRPWIDGETSTYLETYPE_GRID_COLUMN,
        //GRPWIDGETSTYLETYPE_GRID_COLUMN_END,
        //GRPWIDGETSTYLETYPE_GRID_COLUMN_GAP,
        //GRPWIDGETSTYLETYPE_GRID_COLUMN_START,
        //GRPWIDGETSTYLETYPE_GRID_GAP,
        //GRPWIDGETSTYLETYPE_GRID_ROW,
        //GRPWIDGETSTYLETYPE_GRID_ROW_END,
        //GRPWIDGETSTYLETYPE_GRID_ROW_GAP,
        //GRPWIDGETSTYLETYPE_GRID_ROW_START,
        //GRPWIDGETSTYLETYPE_GRID_TEMPLATE,
        //GRPWIDGETSTYLETYPE_GRID_TEMPLATE_AREAS,
        //GRPWIDGETSTYLETYPE_GRID_TEMPLATE_COLUMNS,
        //GRPWIDGETSTYLETYPE_GRID_TEMPLATE_ROWS,

        //GRPWIDGETSTYLETYPE_HANGING_PUNCTUATION,

        //GRPWIDGETSTYLETYPE_JUSTIFY_CONTENT

        //GRPWIDGETSTYLETYPE_LIST_STYLE
        //GRPWIDGETSTYLETYPE_LIST_STYLE_IMAGE
        //GRPWIDGETSTYLETYPE_LIST_STYLE_POSITION
        //GRPWIDGETSTYLETYPE_LIST_STYLE_TYPE

        //GRPWIDGETSTYLETYPE_OBJECT_FIT
        //GRPWIDGETSTYLETYPE_ORDER

        //GRPWIDGETSTYLETYPE_PAGE_BREAK_AFTER
        //GRPWIDGETSTYLETYPE_PAGE_BREAK_BEFORE
        //GRPWIDGETSTYLETYPE_PAGE_BREAK_INSIDE

        //GRPWIDGETSTYLETYPE_PERSPECTIVE
        //GRPWIDGETSTYLETYPE_PERSPECTIVE_ORIGIN

        //GRPWIDGETSTYLETYPE_QUOTES

        //GRPWIDGETSTYLETYPE_RESIZE

        //GRPWIDGETSTYLETYPE_TABSIZE

        //GRPWIDGETSTYLETYPE_TABLE_LAYOUT
        //GRPWIDGETSTYLETYPE_TABLE_LAYOUT

        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN,

        GRPWIDGETSTYLETYPE_OPACITY,
        GRPWIDGETSTYLETYPE_OVERFLOW,

        GRPWIDGETSTYLETYPE_WORD_SPACING,
        GRPWIDGETSTYLETYPE_WHITESPACE,

        GRPWIDGETSTYLETYPE_TEXT_ALIGN,

        //GRPWIDGETSTYLETYPE_TRANSFORM,
        //GRPWIDGETSTYLETYPE_TRANSFORM_ORIGIN,
        //GRPWIDGETSTYLETYPE_TRANSFORM_TRANSLATE,
        //GRPWIDGETSTYLETYPE_TRANSFORM_ROTATE,
        //GRPWIDGETSTYLETYPE_TRANSFORM_SCALE,
        //GRPWIDGETSTYLETYPE_TRANSFORM_SKEW,

        //GRPWIDGETSTYLETYPE_WORDBREAK,
        GRPWIDGETSTYLETYPE_BOXSHADOW,
        GRPWIDGETSTYLETYPE_BOXSHADOW_POSITIONX,
        GRPWIDGETSTYLETYPE_BOXSHADOW_POSITIONY,
        GRPWIDGETSTYLETYPE_BOXSHADOW_BLUR,
        GRPWIDGETSTYLETYPE_BOXSHADOW_SPREAD,
        GRPWIDGETSTYLETYPE_TEXTSHADOW,
        GRPWIDGETSTYLETYPE_TEXTSHADOW_POSITIONX,
        GRPWIDGETSTYLETYPE_TEXTSHADOW_POSITIONY,
        GRPWIDGETSTYLETYPE_TEXTSHADOW_BLUR,

        //GRPWIDGETSTYLETYPE_TEXT_TRANSFORM

        GRPWIDGETSTYLETYPE_CONTENT,

        GRPWIDGETSTYLETYPE_OUTLINE,
        GRPWIDGETSTYLETYPE_OUTLINE_WIDTH,
        GRPWIDGETSTYLETYPE_OUTLINE_STYLE,
        GRPWIDGETSTYLETYPE_OUTLINE_COLOR,
        GRPWIDGETSTYLETYPE_OUTLINE_OFFSET,

        GRPWIDGETSTYLETYPE_MARGIN,
        GRPWIDGETSTYLETYPE_MARGIN_TOP,
        GRPWIDGETSTYLETYPE_MARGIN_RIGHT,
        GRPWIDGETSTYLETYPE_MARGIN_BOTTOM,
        GRPWIDGETSTYLETYPE_MARGIN_LEFT,

        GRPWIDGETSTYLETYPE_PADDING,
        GRPWIDGETSTYLETYPE_PADDING_TOP,
        GRPWIDGETSTYLETYPE_PADDING_RIGHT,
        GRPWIDGETSTYLETYPE_PADDING_BOTTOM,
        GRPWIDGETSTYLETYPE_PADDING_LEFT,

        //GRPWIDGETSTYLETYPE_ZINDEX
        //GRPWIDGETSTYLETYPE_TRANSITION
        GRPWIDGETSTYLETYPE_ISTEXT //detect if is anonymous text during align step
    };

    #define GRPWIDGET_STYLE_INHERIT (XDWORD)0

    enum GRPWIDGETSTYLE_DISPLAY_TYPE
    {
        GRPWIDGETSTYLE_DISPLAY_TYPE_STATIC,
        GRPWIDGETSTYLE_DISPLAY_TYPE_BLOCK,
        GRPWIDGETSTYLE_DISPLAY_TYPE_INLINE,
        GRPWIDGETSTYLE_DISPLAY_TYPE_HIDDEN,
        GRPWIDGETSTYLE_DISPLAY_TYPE_INITIAL,
        GRPWIDGETSTYLE_DISPLAY_TYPE_INLINEBLOCK,

        GRPWIDGETSTYLE_DISPLAY_TYPE_FLEX,
        GRPWIDGETSTYLE_DISPLAY_TYPE_INLINE_FLEX,
        GRPWIDGETSTYLE_DISPLAY_TYPE_INLINE_TABLE,
        GRPWIDGETSTYLE_DISPLAY_TYPE_LIST_ITEM,
        GRPWIDGETSTYLE_DISPLAY_TYPE_RUN_IN,

        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_CAPTION,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_COLUMN_GROUP,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_HEADER_GROUP,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_FOOTER_GROUP,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_ROW_GROUP,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_CELL,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_COLUMN,
        GRPWIDGETSTYLE_DISPLAY_TYPE_TABLE_ROW
    };

    enum GRPWIDGETSTYLETYPE_VISIBILITY
    {
        GRPWIDGETSTYLE_VISIBILITY_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_VISIBILITY_VISIBLE,
        GRPWIDGETSTYLE_VISIBILITY_HIDDEN,
        GRPWIDGETSTYLE_VISIBILITY_COLLAPSE,
        GRPWIDGETSTYLE_VISIBILITY_INITIAL
    };

    enum GRPWIDGETSTYLE_POSITION_TYPE
    {
        GRPWIDGETSTYLE_POSITION_TYPE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_POSITION_TYPE_RELATIVE,
        GRPWIDGETSTYLE_POSITION_TYPE_ABSOLUTE,
        GRPWIDGETSTYLE_POSITION_TYPE_FIXED,
        GRPWIDGETSTYLE_POSITION_TYPE_STICKY,
        GRPWIDGETSTYLE_POSITION_TYPE_STATIC
    };

    enum GRPWIDGETSTYLE_FLOAT_TYPE
    {
        GRPWIDGETSTYLE_FLOAT_TYPE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_FLOAT_TYPE_NONE,
        GRPWIDGETSTYLE_FLOAT_TYPE_RIGHT,
        GRPWIDGETSTYLE_FLOAT_TYPE_LEFT,
        GRPWIDGETSTYLE_FLOAT_TYPE_BOTH
    };

    enum GRPWIDGETSTYLE_CLEAR_TYPE
    {
        GRPWIDGETSTYLE_CLEAR_TYPE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_CLEAR_TYPE_NONE,
        GRPWIDGETSTYLE_CLEAR_TYPE_RIGHT,
        GRPWIDGETSTYLE_CLEAR_TYPE_LEFT,
        GRPWIDGETSTYLE_CLEAR_TYPE_BOTH
    };

    enum GRPWIDGETSTYLETYPE_TEXT_ALIGN
    {
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_LEFT,
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_CENTER,
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_RIGHT,
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_JUSTIFY,
        GRPWIDGETSTYLETYPE_TEXT_ALIGN_INITIAL
    };

    enum GRPWIDGETSTYLETYPE_VERTICAL_ALIGN
    {
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_BASELINE,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_SUB,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_SUPER,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_TOP,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_TEXT_TOP,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_MIDDLE,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_BOTTOM,
        GRPWIDGETSTYLETYPE_VERTICAL_ALIGN_TEXT_BOTTOM
    };

    enum GRPWIDGETSTYLE_OVERFLOW_TYPE
    {
        GRPWIDGETSTYLE_OVERFLOW_TYPE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_OVERFLOW_TYPE_SCROLL,
        GRPWIDGETSTYLE_OVERFLOW_TYPE_HIDDEN,
        GRPWIDGETSTYLE_OVERFLOW_TYPE_VISIBLE
    };

    enum GRPWIDGETSTYLE_BORDER_STYLE_TYPE
    {
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_NONE,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_HIDDEN,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_DOTTED,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_DASHED,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_SOLID,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_DOUBLE,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_GROOVE,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_RIDGE,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_INSET,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_OUTSET,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_INITIAL,
        GRPWIDGETSTYLE_BORDER_STYLE_TYPE_INHERIT,
    };

    enum GRPWIDGETSTYLE_FONT_DECORATION_TYPE
    {
        GRPWIDGETSTYLE_FONT_DECORATION_NONE=1,
        GRPWIDGETSTYLE_FONT_DECORATION_UNDERLINE,
        GRPWIDGETSTYLE_FONT_DECORATION_STROKE,
        GRPWIDGETSTYLE_FONT_DECORATION_OVERLINE
    };

    enum GRPWIDGETSTYLE_WHITESPACE
    {
        GRPWIDGETSTYLE_WHITESPACE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_WHITESPACE_NORMAL,
        GRPWIDGETSTYLE_WHITESPACE_NOWRAP,
        GRPWIDGETSTYLE_WHITESPACE_PRE,
        GRPWIDGETSTYLE_WHITESPACE_PRELINE,
        GRPWIDGETSTYLE_WHITESPACE_PREWRAP,
        GRPWIDGETSTYLE_WHITESPACE_INITIAL
    };

    /*
    enum GRPWIDGETSTYLE_WORDBREAK_TYPE
    {
        GRPWIDGETSTYLE_WORDBREAK_TYPE_INHERIT = GRPWIDGET_STYLE_INHERIT,
        GRPWIDGETSTYLE_WORDBREAK_TYPE_NORMAL,
        GRPWIDGETSTYLE_WORDBREAK_TYPE_BREAKALL,
        GRPWIDGETSTYLE_WORDBREAK_TYPE_KEEPALL
    };
    */

    //------------------------------------- modifiers

    enum GRPWIDGETTARGETTYPE
    {
        GRPWIDGETTARGETTYPE_TAG = 0,
        GRPWIDGETTARGETTYPE_NAME,
        GRPWIDGETTARGETTYPE_CLASS,
        GRPWIDGETTARGETTYPE_RULE,
        GRPWIDGETTARGETTYPE_ALL
    };

    enum GRPWIDGETSECTION
    {
        GRPWIDGETSECTION_BORDER = 0,
        GRPWIDGETSECTION_OUTLINE,
        GRPWIDGETSECTION_BACKGROUND,
        GRPWIDGETSECTION_BOXSHADOW,
        GRPWIDGETSECTION_CONTENT,
        GRPWIDGETSECTION_TEXT,
        GRPWIDGETSECTION_TEXTSHADOW
    };

    enum GRPWIDGETSECTION_FLAG
    {
        GRPWIDGETSECTION_FLAG_NONE              = 0,
        GRPWIDGETSECTION_FLAG_BORDER            = 1<<0,
        GRPWIDGETSECTION_FLAG_BACKGROUND        = 1<<1,
        GRPWIDGETSECTION_FLAG_CONTENT           = 1<<2,
        GRPWIDGETSECTION_FLAG_TEXT              = 1<<3,
        GRPWIDGETSECTION_FLAG_TEXT_STYLE        = 1<<4,
        GRPWIDGETSECTION_FLAG_STYLE             = 1<<5,
        GRPWIDGETSECTION_FLAG_FLOW              = 1<<6,
        GRPWIDGETSECTION_FLAG_COLOR             = 1<<7,
        GRPWIDGETSECTION_FLAG_BACKGROUND_COLOR  = 1<<8,
        GRPWIDGETSECTION_FLAG_BORDER_COLOR      = 1<<9,
        GRPWIDGETSECTION_FLAG_CONTENT_COLOR     = 1<<10,
        GRPWIDGETSECTION_FLAG_BOXSHADOW         = 1<<11,
        GRPWIDGETSECTION_FLAG_BOXSHADOW_COLOR   = 1<<12,
        GRPWIDGETSECTION_FLAG_TEXTSHADOW        = 1<<13,
        GRPWIDGETSECTION_FLAG_TEXTSHADOW_COLOR  = 1<<14,
        GRPWIDGETSECTION_FLAG_OUTLINE           = 1<<15,
        GRPWIDGETSECTION_FLAG_OUTLINE_COLOR     = 1<<16,
        GRPWIDGETSECTION_FLAG_TIDY              = 1<<17,

        GRPWIDGETSECTION_FLAG_TEXT_CHANGED      = GRPWIDGETSECTION_FLAG_TEXT | GRPWIDGETSECTION_FLAG_TEXT_STYLE,
        GRPWIDGETSECTION_FLAG_ALL               =
                                GRPWIDGETSECTION_FLAG_BORDER |
                                GRPWIDGETSECTION_FLAG_BACKGROUND |
                                GRPWIDGETSECTION_FLAG_CONTENT |
                                GRPWIDGETSECTION_FLAG_TEXT |
                                GRPWIDGETSECTION_FLAG_TEXT_STYLE |
                                GRPWIDGETSECTION_FLAG_STYLE |
                                GRPWIDGETSECTION_FLAG_FLOW |
                                GRPWIDGETSECTION_FLAG_COLOR |
                                GRPWIDGETSECTION_FLAG_BACKGROUND_COLOR |
                                GRPWIDGETSECTION_FLAG_BORDER_COLOR |
                                GRPWIDGETSECTION_FLAG_CONTENT_COLOR
    };

    enum GRPWIDGETSTATE
    {
        GRPWIDGETSTATE_NONE = 0,
        GRPWIDGETSTATE_HOVER,
        GRPWIDGETSTATE_ACTIVE,
        GRPWIDGETSTATE_VISITED,
        GRPWIDGETSTATE_FOCUS,
        GRPWIDGETSTATE_CHECKED,
        GRPWIDGETSTATE_ENABLED,
        GRPWIDGETSTATE_DISABLED
    };

    enum GRPWIDGETBEHAVIORTYPE
    {
        GRPWIDGETBEHAVIORTYPE_ONENTER = 0,
        GRPWIDGETBEHAVIORTYPE_ONEXIT,
        GRPWIDGETBEHAVIORTYPE_ONCLICK,
        GRPWIDGETBEHAVIORTYPE_ONSELECTED,
        GRPWIDGETBEHAVIORTYPE_ONCHECK,
        GRPWIDGETBEHAVIORTYPE_ONUNCHECK,
        GRPWIDGETBEHAVIORTYPE_STEP
    };

    enum GRPWIDGETSTYLEVALUETYPE
    {
        GRPWIDGETSTYLEVALUETYPE_UNSET =0,
        GRPWIDGETSTYLEVALUETYPE_ABSOLUTE,
        GRPWIDGETSTYLEVALUETYPE_RELATIVE,
        GRPWIDGETSTYLEVALUETYPE_SPECIAL,

    };

class GRPSTYLESHEET;

enum GRPWIDGET_VALUE_TYPE
{
    GRPWIDGET_VALUE_TYPE_NUMBER,
    GRPWIDGET_VALUE_TYPE_IMAGE,
    GRPWIDGET_VALUE_TYPE_COLOR,
    GRPWIDGET_VALUE_TYPE_STRING
};

class GRPWIDGETSTYLE
{
public:
    GRPWIDGETSTYLE(GRPWIDGETSTYLETYPE type= GRPWIDGETSTYLETYPE_UNKNOWN, bool inherited= true, bool animatable=false, GRPWIDGETSTYLETYPE parentrelationproperty= GRPWIDGETSTYLETYPE_UNKNOWN) :
        inherited(inherited),
        animatable(false),
        transition(0.0),
        currentframe(0.0),
        csstype(type),
        parentrelationproperty(parentrelationproperty) {    };

    WIDGETSTRING                type;
    WIDGETSTRING                value;
    GRPWIDGETSTYLEVALUETYPE     valuetype;
    float                       transition;
    GRPWIDGETSTYLETYPE          csstype;
    GRPWIDGETSTYLETYPE          parentrelationproperty;
    bool                        inherited;
    bool                        animatable;

    bool                        ParseValue(WIDGETSTRING*text, float& value, GRPWIDGETSTYLEVALUETYPE& type);

    static XMAP<GRPWIDGETSTYLETYPE, WIDGETSTRING*> keynames;

private:

    float                 currentframe;
};

class GRPCOLOR;

class GRPWIDGETSTYLECLASSSELECTOR
{
public:
    GRPWIDGETSTYLECLASSSELECTOR()
    {
        targettype  = GRPWIDGETTARGETTYPE_TAG;
        targetstate = GRPWIDGETSTATE_NONE;
    }

    WIDGETSTRING            name;
    GRPWIDGETTARGETTYPE     targettype;
    GRPWIDGETSTATE          targetstate;
    WIDGETSTRING            attribute;
    WIDGETSTRING            attributevalue;
};

class GRPWIDGETSTYLECLASS
{
public:
                GRPWIDGETSTYLECLASS ();
                //GRPWIDGETSTYLECLASS (XCHAR* name, XCHAR* definition);
                ~GRPWIDGETSTYLECLASS();

    //bool        Process             (XCHAR*);
    bool        ApplyTo             (GRPWIDGET*);
    GRPCOLOR*   ParseColor          (WIDGETSTRING &value);
    bool        AppliesTo           (GRPWIDGET*);
    bool        Selects             (GRPWIDGET*);

    XMAP<GRPWIDGETSTYLETYPE, GRPWIDGETSTYLE*> styles;
    GRPSTYLESHEET*                            ownersheet;
    XVECTOR<GRPWIDGETSTYLECLASSSELECTOR*>     dependencies;

    GRPWIDGETSTYLECLASSSELECTOR               selector;
    WIDGETSTRING                              name;

    void Clean()
    {
        ownersheet      = NULL;
    }
};


class GRPSTYLESHEET
{
public:
    ~GRPSTYLESHEET();
    bool                                Add(GRPWIDGETSTYLECLASS*);

    WIDGETSTRING                        name;
    XVECTOR<GRPWIDGETSTYLECLASS*>       styles;  //the styles might be global or specific, so we have to check them out, so no map is possible
};



/*---- INLINE FUNCTIONS ------------------------------------------------------------------*/

#endif
